{"version":3,"sources":["store/reducers/index.js","store/reducers/questions.js","store/constants/questions.js","store/reducers/modal.js","store/constants/modal.js","store/index.js","components/Message.js","components/Loader.js","components/QuestionCard.js","store/actions/modal.js","components/QuestionModal.js","App.js","store/actions/questions.js","index.js"],"names":["combineReducers","questionsList","state","questions","action","type","loading","payload","error","modal","questionId","middleware","thunk","store","createStore","reducer","composeWithDevTools","applyMiddleware","Message","variant","children","Alert","defaultProps","Loader","Spinner","animation","role","style","width","height","margin","display","className","QuestionCard","userName","userImage","questionTitle","questionTags","dispatch","useDispatch","Card","Row","Col","md","Img","src","alt","Body","Title","Text","join","Button","onClick","openModal","QuestionModal","isAnswered","questionUrl","useSelector","Modal","show","Boolean","onHide","Header","closeButton","Footer","href","target","rel","App","question","find","question_id","useEffect","a","fetch","response","json","data","items","message","Container","title","owner","display_name","is_answered","link","map","key","profile_image","tags","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.363b9f51.chunk.js","sourcesContent":["import { combineReducers } from \"redux\";\r\nimport { questionsList } from \"./questions\";\r\nimport { modal } from \"./modal\";\r\n\r\nexport default combineReducers({\r\n  questionsList,\r\n  modal,\r\n});\r\n","import {\r\n  QUESTIONS_LIST_REQUEST,\r\n  QUESTIONS_LIST_SUCCESS,\r\n  QUESTIONS_LIST_FAIL,\r\n} from \"../constants/questions\";\r\n\r\nexport const questionsList = (state = { questions: [] }, action) => {\r\n  switch (action.type) {\r\n    case QUESTIONS_LIST_REQUEST:\r\n      return { loading: true, questions: [] };\r\n\r\n    case QUESTIONS_LIST_SUCCESS:\r\n      return { loading: false, questions: action.payload };\r\n\r\n    case QUESTIONS_LIST_FAIL:\r\n      return { loading: false, error: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const QUESTIONS_LIST_REQUEST = \"QUESTIONS_LIST_REQUEST\";\r\nexport const QUESTIONS_LIST_SUCCESS = \"QUESTIONS_LIST_SUCCESS\";\r\nexport const QUESTIONS_LIST_FAIL = \"QUESTIONS_LIST_FAIL\";\r\n","import { MODAL_OPEN, MODAL_CLOSE } from \"../constants/modal\";\r\n\r\nexport const modal = (state = { questionId: null }, action) => {\r\n  switch (action.type) {\r\n    case MODAL_OPEN:\r\n      return { questionId: action.payload.questionId };\r\n\r\n    case MODAL_CLOSE:\r\n      return { questionId: null };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const MODAL_OPEN = \"MODAL_OPEN\";\r\nexport const MODAL_CLOSE = \"MODAL_CLOSE\";\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport reducer from \"./reducers\";\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\n\r\nconst Message = ({ variant, children }) => {\r\n  return <Alert variant={variant}>{children}</Alert>;\r\n};\r\n\r\nMessage.defaultProps = {\r\n  variant: \"info\",\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <Spinner\r\n      animation=\"border\"\r\n      role=\"status\"\r\n      style={{\r\n        width: \"100px\",\r\n        height: \"100px\",\r\n        margin: \"auto\",\r\n        display: \"block\",\r\n      }}\r\n    >\r\n      <span className=\"sr-only\">Loading...</span>\r\n    </Spinner>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { Card, Row, Col, Button } from \"react-bootstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { openModal } from \"./../store/actions/modal\";\r\n\r\nconst QuestionCard = ({\r\n  questionId,\r\n  userName,\r\n  userImage,\r\n  questionTitle,\r\n  questionTags,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Card className=\"my-3 rounded\">\r\n      <Row>\r\n        <Col md=\"auto\">\r\n          <Card.Img\r\n            src={userImage}\r\n            variant=\"top\"\r\n            alt={userName}\r\n            style={{\r\n              height: \"180px\",\r\n              width: \"180px\",\r\n            }}\r\n          />\r\n        </Col>\r\n        <Col>\r\n          <Card.Body>\r\n            <Card.Title>{questionTitle}</Card.Title>\r\n\r\n            <Card.Text>{questionTags.join(\", \")}</Card.Text>\r\n\r\n            <Button\r\n              variant=\"primary\"\r\n              onClick={() => dispatch(openModal(questionId))}\r\n            >\r\n              Know more\r\n            </Button>\r\n          </Card.Body>\r\n        </Col>\r\n      </Row>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default QuestionCard;\r\n","import { MODAL_OPEN, MODAL_CLOSE } from \"../constants/modal\";\r\n\r\nexport const openModal = (questionId) => {\r\n  return {\r\n    type: MODAL_OPEN,\r\n    payload: {\r\n      questionId,\r\n    },\r\n  };\r\n};\r\n\r\nexport const closeModal = () => {\r\n  return {\r\n    type: MODAL_CLOSE,\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { closeModal } from \"./../store/actions/modal\";\r\n\r\nconst QuestionModal = ({\r\n  questionTitle,\r\n  userName,\r\n  isAnswered,\r\n  questionUrl,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { questionId } = useSelector((state) => state.modal);\r\n\r\n  return (\r\n    <Modal show={Boolean(questionId)} onHide={() => dispatch(closeModal())}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{questionTitle}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {`Question asked By ${userName}`}\r\n        <br />\r\n        {`Question is ${!isAnswered ? \"not\" : \"\"} answerd`}\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"primary\" onClick={() => dispatch(closeModal())}>\r\n          Close\r\n        </Button>\r\n        <Button variant=\"secondary\">\r\n          <a href={questionUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            Go to Stackoverflow\r\n          </a>\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default QuestionModal;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport Message from \"./components/Message\";\r\nimport Loader from \"./components/Loader\";\r\nimport QuestionCard from \"./components/QuestionCard\";\r\nimport QuestionModal from \"./components/QuestionModal\";\r\nimport { listQuestions } from \"./store/actions/questions\";\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  // data from redux store\r\n  const { questionId } = useSelector((state) => state.modal);\r\n  const questionsList = useSelector((state) => state.questionsList);\r\n\r\n  // data for UI\r\n  const { loading, error, questions } = questionsList;\r\n\r\n  const question = questions.find(\r\n    (question) => question.question_id === questionId\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(listQuestions());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Container className=\" justify-content-md-center\">\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant=\"danger\">{error}</Message>\r\n      ) : (\r\n        <>\r\n          {/* modal */}\r\n          {questionId && (\r\n            <QuestionModal\r\n              questionTitle={question.title}\r\n              userName={question.owner.display_name}\r\n              isAnswered={question.is_answered}\r\n              questionUrl={question.link}\r\n            />\r\n          )}\r\n\r\n          {/* All questions */}\r\n          {questions.map((question) => (\r\n            <QuestionCard\r\n              key={question.question_id}\r\n              questionId={question.question_id}\r\n              userName={question.owner.display_name}\r\n              userImage={question.owner.profile_image}\r\n              questionTitle={question.title}\r\n              questionTags={question.tags}\r\n            />\r\n          ))}\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import {\r\n  QUESTIONS_LIST_REQUEST,\r\n  QUESTIONS_LIST_SUCCESS,\r\n  QUESTIONS_LIST_FAIL,\r\n} from \"../constants/questions\";\r\n\r\nconst API_URL =\r\n  \"https://api.stackexchange.com/2.2/questions?order=desc&sort=hot&site=stackoverflow\";\r\n\r\nexport const listQuestions = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: QUESTIONS_LIST_REQUEST });\r\n\r\n    const response = await fetch(API_URL);\r\n    const data = await response.json();\r\n\r\n    dispatch({\r\n      type: QUESTIONS_LIST_SUCCESS,\r\n      payload: data.items,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: QUESTIONS_LIST_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport App from \"./App\";\nimport \"./bootstrap.min.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}